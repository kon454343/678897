!function($, undefined) {
    var _input = document.createElement('input'), _support = {
        setSelectionRange: 'setSelectionRange' in _input || 'selectionStart' in _input,
        createTextRange: 'createTextRange' in _input || 'selection' in document
    }, _rNewlineIE = /\r\n/g, _rCarriageReturn = /\r/g, _getValue = function(input) {
        if ('undefined' != typeof input.value) {
            return input.value;
        }
        return $(input).text();
    }, _setValue = function(input, value) {
        if ('undefined' != typeof input.value) {
            input.value = value;
        } else {
            $(input).text(value);
        }
    }, _getIndex = function(input, pos) {
        var norm = _getValue(input).replace(_rCarriageReturn, ''), len = norm.length;
        if ('undefined' == typeof pos) {
            pos = len;
        }
        pos = Math.floor(pos);
        if (0 > pos) {
            pos = len + pos;
        }
        if (0 > pos) {
            pos = 0;
        }
        if (pos > len) {
            pos = len;
        }
        return pos;
    }, _hasAttr = function(input, attrName) {
        return input.hasAttribute ? input.hasAttribute(attrName) : 'undefined' != typeof input[attrName];
    }, Range = function(start, end, length, text) {
        this.start = start || 0;
        this.end = end || 0;
        this.length = length || 0;
        this.text = text || '';
    };
    Range.prototype.toString = function() {
        return JSON.stringify(this, null, '    ');
    };
    var _getCaretW3 = function(input) {
        return input.selectionStart;
    }, _getCaretIE = function(input) {
        var caret, range, textInputRange, rawValue, len, endRange;
        input.focus();
        input.focus();
        range = document.selection.createRange();
        if (range && range.parentElement() === input) {
            rawValue = _getValue(input);
            len = rawValue.length;
            textInputRange = input.createTextRange();
            textInputRange.moveToBookmark(range.getBookmark());
            endRange = input.createTextRange();
            endRange.collapse(!1);
            if (textInputRange.compareEndPoints("StartToEnd", endRange) > -1) {
                caret = rawValue.replace(_rNewlineIE, '\n').length;
            } else {
                caret = -textInputRange.moveStart("character", -len);
            }
            return caret;
        }
        return 0;
    }, _getCaret = function(input) {
        if (!input) {
            return undefined;
        }
        if (_support.setSelectionRange) {
            return _getCaretW3(input);
        } else {
            if (_support.createTextRange) {
                return _getCaretIE(input);
            }
        }
        return undefined;
    }, _setCaretW3 = function(input, pos) {
        input.setSelectionRange(pos, pos);
    }, _setCaretIE = function(input, pos) {
        var range = input.createTextRange();
        range.move('character', pos);
        range.select();
    }, _setCaret = function(input, pos) {
        input.focus();
        pos = _getIndex(input, pos);
        if (_support.setSelectionRange) {
            _setCaretW3(input, pos);
        } else {
            if (_support.createTextRange) {
                _setCaretIE(input, pos);
            }
        }
    }, _insertAtCaret = function(input, text) {
        var curPos = _getCaret(input), oldValueNorm = _getValue(input).replace(_rCarriageReturn, ''), newLength = +(curPos + text.length + (oldValueNorm.length - curPos)), maxLength = +input.getAttribute('maxlength');
        if (_hasAttr(input, 'maxlength') && newLength > maxLength) {
            var delta = text.length - (newLength - maxLength);
            text = text.substr(0, delta);
        }
        _setValue(input, oldValueNorm.substr(0, curPos) + text + oldValueNorm.substr(curPos));
        _setCaret(input, curPos + text.length);
    }, _getInputRangeW3 = function(input) {
        var range = new Range();
        range.start = input.selectionStart;
        range.end = input.selectionEnd;
        var min = Math.min(range.start, range.end), max = Math.max(range.start, range.end);
        range.length = max - min;
        range.text = _getValue(input).substring(min, max);
        return range;
    }, _getInputRangeIE = function(input) {
        var range = new Range();
        input.focus();
        var selection = document.selection.createRange();
        if (selection && selection.parentElement() === input) {
            var len, normalizedValue, textInputRange, endRange, start = 0, end = 0, rawValue = _getValue(input);
            len = rawValue.length;
            normalizedValue = rawValue.replace(/\r\n/g, "\n");
            textInputRange = input.createTextRange();
            textInputRange.moveToBookmark(selection.getBookmark());
            endRange = input.createTextRange();
            endRange.collapse(!1);
            if (textInputRange.compareEndPoints("StartToEnd", endRange) > -1) {
                start = end = len;
            } else {
                start = -textInputRange.moveStart("character", -len);
                start += normalizedValue.slice(0, start).split("\n").length - 1;
                if (textInputRange.compareEndPoints("EndToEnd", endRange) > -1) {
                    end = len;
                } else {
                    end = -textInputRange.moveEnd("character", -len);
                    end += normalizedValue.slice(0, end).split("\n").length - 1;
                }
            }
            start -= rawValue.substring(0, start).split('\r\n').length - 1;
            end -= rawValue.substring(0, end).split('\r\n').length - 1;
            range.start = start;
            range.end = end;
            range.length = range.end - range.start;
            range.text = normalizedValue.substr(range.start, range.length);
        }
        return range;
    }, _getInputRange = function(input) {
        if (!input) {
            return undefined;
        }
        if (_support.setSelectionRange) {
            return _getInputRangeW3(input);
        } else {
            if (_support.createTextRange) {
                return _getInputRangeIE(input);
            }
        }
        return undefined;
    }, _setInputRangeW3 = function(input, startPos, endPos) {
        input.setSelectionRange(startPos, endPos);
    }, _setInputRangeIE = function(input, startPos, endPos) {
        var tr = input.createTextRange();
        tr.moveEnd('textedit', -1);
        tr.moveStart('character', startPos);
        tr.moveEnd('character', endPos - startPos);
        tr.select();
    }, _setInputRange = function(input, startPos, endPos) {
        startPos = _getIndex(input, startPos);
        endPos = _getIndex(input, endPos);
        if (_support.setSelectionRange) {
            _setInputRangeW3(input, startPos, endPos);
        } else {
            if (_support.createTextRange) {
                _setInputRangeIE(input, startPos, endPos);
            }
        }
    }, _replaceInputRange = function(input, text) {
        var $input = $(input), oldValue = $input.val(), selection = _getInputRange(input), newLength = +(selection.start + text.length + (oldValue.length - selection.end)), maxLength = +$input.attr('maxlength');
        if ($input.is('[maxlength]') && newLength > maxLength) {
            var delta = text.length - (newLength - maxLength);
            text = text.substr(0, delta);
        }
        var startText = oldValue.substr(0, selection.start), endText = oldValue.substr(selection.end);
        $input.val(startText + text + endText);
        var startPos = selection.start, endPos = startPos + text.length;
        _setInputRange(input, selection.length ? startPos : endPos, endPos);
    }, _selectAllW3 = function(elem) {
        var selection = window.getSelection(), range = document.createRange();
        range.selectNodeContents(elem);
        selection.removeAllRanges();
        selection.addRange(range);
    }, _selectAllIE = function(elem) {
        var range = document.body.createTextRange();
        range.moveToElementText(elem);
        range.select();
    }, _selectAll = function(elem) {
        var $elem = $(elem);
        if ($elem.is('input, textarea') || elem.select) {
            $elem.select();
            return;
        }
        if (_support.setSelectionRange) {
            _selectAllW3(elem);
        } else {
            if (_support.createTextRange) {
                _selectAllIE(elem);
            }
        }
    }, _deselectAll = function() {
        if (document.selection) {
            document.selection.empty();
        } else {
            if (window.getSelection) {
                window.getSelection().removeAllRanges();
            }
        }
    };
    $.extend($.fn, {
        caret: function() {
            var $inputs = this.filter('input, textarea');
            if (0 === arguments.length) {
                var input = $inputs.get(0);
                return _getCaret(input);
            } else {
                if ('number' == typeof arguments[0]) {
                    var pos = arguments[0];
                    $inputs.each(function(_i, input) {
                        _setCaret(input, pos);
                    });
                } else {
                    var text = arguments[0];
                    $inputs.each(function(_i, input) {
                        _insertAtCaret(input, text);
                    });
                }
            }
            return this;
        },
        range: function() {
            var $inputs = this.filter('input, textarea');
            if (0 === arguments.length) {
                var input = $inputs.get(0);
                return _getInputRange(input);
            } else {
                if ('number' == typeof arguments[0]) {
                    var startPos = arguments[0], endPos = arguments[1];
                    $inputs.each(function(_i, input) {
                        _setInputRange(input, startPos, endPos);
                    });
                } else {
                    var text = arguments[0];
                    $inputs.each(function(_i, input) {
                        _replaceInputRange(input, text);
                    });
                }
            }
            return this;
        },
        selectAll: function() {
            return this.each(function(_i, elem) {
                _selectAll(elem);
            });
        }
    });
    $.extend($, {
        deselectAll: function() {
            _deselectAll();
            return this;
        }
    });
}(window.jQuery || window.Zepto || window.$);